<?php

use Drupal\commerce_product\Entity\ProductInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\commerce_product\Entity\ProductVariationInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\commerce_order\Entity\Order;


/**
 * Implements hook_ENTITY_VIEW().
 */
function custom_blocks_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $current_user = \Drupal::currentUser();
  $account = \Drupal\user\Entity\User::load($current_user->id());

  if ($entity instanceof NodeInterface && $entity->bundle() === 'article') {
    $nid = $entity->id();

    // Skip admin or inactive account
    if (!$account->hasRole('administrator') && !$account->get('field_account_active')->value) {
      $build['#markup'] = '<div class="access-denied">Votre compte n’est pas actif. Veuillez effectuer un paiement pour accéder à cette formation.</div>';
      $build['#access'] = TRUE;
      unset($build['body']);
      return;
    }

    // Cas 1 : Commandes Commerce
    $query = \Drupal::entityTypeManager()->getStorage('commerce_order')->getQuery();
    $query->condition('uid', $account->id())
          ->condition('state', 'completed')
          ->accessCheck(FALSE);
    $order_ids = $query->execute();

    if (!empty($order_ids)) {
      $orders = Order::loadMultiple($order_ids);

      foreach ($orders as $order) {
        foreach ($order->getItems() as $order_item) {
          $variation = $order_item->getPurchasedEntity();

          if ($variation && $variation instanceof \Drupal\commerce_product\Entity\ProductVariationInterface) {
            $product = $variation->getProduct();

            if ($product instanceof ProductInterface) {
              $linked_formations = $product->get('field_formations_associees')->referencedEntities();

              foreach ($linked_formations as $index => $formation_node) {
                if ($formation_node->id() == $nid) {
                  // Formation en 1re position : accès immédiat
                  if ($index === 0) {
                    return;
                  }

                  // Formations suivantes : accès différé selon l’index
                  $completed_time = $order->getCompletedTime();
                  if ($completed_time) {
                    $now = \Drupal::time()->getCurrentTime();
                    $days_required = 7 * $index;
                    $days_since = ($now - $completed_time) / (60 * 60 * 24);

                    if ($days_since >= $days_required) {
                      return;
                    } else {
                      $remaining = ceil($days_required - $days_since);
                      $build['#markup'] = '<div class="access-denied">Cette formation sera disponible dans ' . $remaining . ' jour(s).</div>';
                      $build['#access'] = TRUE;
                      unset($build['body']);
                      return;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    // Cas 2 : Paiement manuel
    $formation_ids = array_map(fn($item) => $item['target_id'], $account->get('field_formations_achetees')->getValue());

    if (in_array($nid, $formation_ids)) {
      $manual_validation_date = $account->get('field_formation_purchase_date')->value;

      // On récupère dynamiquement l’index de la formation depuis le champ associé au produit
      $index = null;
      foreach ($formation_ids as $i => $fid) {
        if ($fid == $nid) {
          $index = $i;
          break;
        }
      }

      if ($index === 0) {
        return; // accès immédiat
      }

      if ($manual_validation_date) {
        $manual_timestamp = strtotime($manual_validation_date);
        $now = \Drupal::time()->getCurrentTime();

        if ($index === 1) {
          $hours_required = 2; //7
          $hours_since = ($now - $manual_timestamp) / 3600; //

          if ($hours_since >= $hours_required) {
            return;
          } else {
            $h_remaining = ceil($hours_required - $hours_since);
            $build['#markup'] = '<div class="access-denied">La formation sera disponible dans ' . $h_remaining . ' heure(s).</div>';
            $build['#access'] = TRUE;
            unset($build['body']);
            return;
          }
        } else {
          $days_required = 7 * $index;
          $days_since = ($now - $manual_timestamp) / (60 * 60 * 24);

          if ($days_since >= $days_required) {
            return;
          } else {
            $remaining = ceil($days_required - $days_since);
            $build['#markup'] = '<div class="access-denied">La formation sera disponible dans ' . $remaining . ' jour(s).</div>';
            $build['#access'] = TRUE;
            unset($build['body']);
            return;
          }
        }

      } else {
        $build['#markup'] = '<div class="access-denied">Date de validation manuelle manquante pour cette formation.</div>';
        $build['#access'] = TRUE;
        unset($build['body']);
        return;
      }
    }

    // Accès refusé par défaut
    $build['#markup'] = '<div class="access-denied">Cette formation ne fait pas partie de vos achats.</div>';
    $build['#access'] = TRUE;
    unset($build['body']);
  }
}

/**
 * Implements hook_preprocess_product().
 */
function custom_blocks_preprocess_commerce_product(&$variables) {
  $product = $variables['product_entity'];

  if ($product->hasField('field_formations_associees')) {
    $linked_formations = $product->get('field_formations_associees')->referencedEntities();

    $variables['linked_formations'] = [];
    foreach ($linked_formations as $formation) {
      $variables['linked_formations'][] = [
        'title' => $formation->label(),
        'url' => $formation->toUrl()->toString(),
      ];
    }
  }

}
