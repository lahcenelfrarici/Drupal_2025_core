<?php

use Drupal\commerce_product\Entity\ProductInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\commerce_product\Entity\ProductVariationInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\commerce_order\Entity\Order;


/**
 * Implements hook_ENTITY_VIEW().
 */


function custom_blocks_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode)
{
  $current_user = \Drupal::currentUser();

  // if (!$current_user->isAuthenticated()) {
  //   return;
  // }

  $account = \Drupal\user\Entity\User::load($current_user->id());

  if ($entity instanceof NodeInterface && $entity->bundle() === 'article') {
    $nid = $entity->id();

    //  Skip les admins
    if (!$account->hasRole('administrator') && !$account->get('field_account_active')->value) {
      $build['#markup'] = '<div class="access-denied">Votre compte n‚Äôest pas actif. Veuillez effectuer un paiement pour acc√©der √† cette formation.</div>';
      $build['#access'] = TRUE;
      unset($build['body']);
      return;
    }

    //  Cas 1 : commandes Drupal Commerce
    $query = \Drupal::entityTypeManager()->getStorage('commerce_order')->getQuery();
    $query->condition('uid', $account->id())
      ->condition('state', 'completed')
      ->accessCheck(FALSE);
    $order_ids = $query->execute();

    if (!empty($order_ids)) {
      $orders = Order::loadMultiple($order_ids);

      foreach ($orders as $order) {
        foreach ($order->getItems() as $order_item) {
          $variation = $order_item->getPurchasedEntity();

          if ($variation && $variation instanceof \Drupal\commerce_product\Entity\ProductVariationInterface) {
            $product = $variation->getProduct();

            if ($product instanceof ProductInterface) {
              $linked_formations = $product->get('field_formations_associees')->referencedEntities();

              foreach ($linked_formations as $index => $formation_node) {
                if ($formation_node->id() == $nid) {
                  // Formation 1 : toujours accessible
                  if ($index === 0) {
                    return;
                  }

                  // Formation 2 : accessible apr√®s 7 jours
                  if ($index === 1) {
                    $completed_time = $order->getCompletedTime(); // timestamp
                    if ($completed_time) {
                      $now = \Drupal::time()->getCurrentTime();
                      $days_since_purchase = ($now - $completed_time) / (60 * 60 * 24);//dd($days_since_purchase);
                      if ($days_since_purchase >= 7) {
                        return;
                      } else {
                        $build['#markup'] = '<div class="access-denied">La formation 2 sera disponible 7 jours apr√®s l‚Äôachat.</div>';
                        $build['#access'] = TRUE;
                        unset($build['body']);
                        return;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    // Cas 2 : Paiement manuel (via champ mannuel via field_formations_achetees)
    $formation_ids = array_map(function ($item) {
      return $item['target_id'];
    }, $account->get('field_formations_achetees')->getValue());

    if ($nid == 1) {
      return;
    }
    if (in_array($nid, $formation_ids)) {


      // Si formation 2 (nid == 2), appliquer d√©lai 7 jours
      if ($nid == 2) {
        $manual_validation_date = $account->get('field_formation_purchase_date')->value;
        if ($manual_validation_date) {
          $manual_timestamp = strtotime($manual_validation_date);
          $now = \Drupal::time()->getCurrentTime();
          // $days_since_manual = ($now - $manual_timestamp) / (60 * 60 * 24); 7days
          $hours_since_manual = ($now - $manual_timestamp) / 3600; //apres 2heur

          if ($hours_since_manual >= 2) {

            return; // acc√®s autoris√©
          } else {
            $jours_restants = ceil(2 - $hours_since_manual);
            $build['#markup'] = '<div class="access-denied">La formation 2 sera disponible ' . ($jours_restants > 1 ? "dans $jours_restants jours." : "demain.") . '</div>';
            $build['#access'] = TRUE;
            unset($build['body']);
            return;
          }
        } else {
          $build['#markup'] = '<div class="access-denied">Date de validation manuelle manquante pour cette formation.</div>';
          $build['#access'] = TRUE;
          unset($build['body']);
          return;
        }
      }
      //
      // Si formation 3 (nid == 3), appliquer d√©lai 7 jours
      if ($nid == 3) {
        $manual_validation_date = $account->get('field_formation_purchase_date')->value;
        if ($manual_validation_date) {
          $manual_timestamp = strtotime($manual_validation_date);
          $now = \Drupal::time()->getCurrentTime();
          // $days_since_manual = ($now - $manual_timestamp) / (60 * 60 * 24); 7days
          $hours_since_manual = ($now - $manual_timestamp) / 3600; //apres 2heur

          if ($hours_since_manual >= 2) {

            return; // acc√®s autoris√©
          } else {
            $jours_restants = ceil(2 - $hours_since_manual);
            $build['#markup'] = '<div class="access-denied">La formation 2 sera disponible ' . ($jours_restants > 1 ? "dans $jours_restants jours." : "demain.") . '</div>';
            $build['#access'] = TRUE;
            unset($build['body']);
            return;
          }
        } else {
          $build['#markup'] = '<div class="access-denied">Date de validation manuelle manquante pour cette formation.</div>';
          $build['#access'] = TRUE;
          unset($build['body']);
          return;
        }
      }

      // ‚úÖ Si une autre formation a √©t√© ajout√©e manuellement
      return;
    }

    // Si aucun cas ne correspond : acc√®s refus√©
    $build['#markup'] = '<div class="access-denied">Cette formation ne fait pas partie de vos achats.</div>';
    $build['#access'] = TRUE;
    unset($build['body']);
  }
}
// function custom_blocks_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode)
// {
//   $current_user = \Drupal::currentUser();

//   if (!$current_user->isAuthenticated()) {
//     return;
//   }

//   $account = \Drupal\user\Entity\User::load($current_user->id());

//   if ($entity instanceof NodeInterface && $entity->bundle() === 'article') {
//     $nid = $entity->id();

//     // üí° V√©rifie que le compte est actif
//     // if (!$account->get('field_account_active')->value) {
//     //   $build['#markup'] = '<div class="access-denied">Votre compte n‚Äôest pas actif. Veuillez effectuer un paiement pour acc√©der √† cette formation.</div>';
//     //   $build['#access'] = TRUE;
//     //   unset($build['body']);
//     //   return;
//     // }

//     // if (
//     //   !$account->hasRole('administrator') &&
//     //   !$account->get('field_account_active')->value
//     // ) {
//     //   $build['#markup'] = '<div class="access-denied">Votre compte n‚Äôest pas actif. Veuillez effectuer un paiement pour acc√©der √† cette formation.</div>';
//     //   $build['#access'] = TRUE;
//     //   // unset($build['body']);
//     //   return;
//     // }

//     // üí° R√©cup√®re les produits achet√©s par l'utilisateur
//     $query = \Drupal::entityTypeManager()->getStorage('commerce_order')->getQuery();
//     $query->condition('uid', $account->id())
//       ->condition('state', 'completed')
//       ->accessCheck(FALSE);
//     $order_ids = $query->execute();
//     // die("eeeeeeeee");
// // dump($order_ids);
//     if (!empty($order_ids)) {
//       $orders = Order::loadMultiple($order_ids);

//       foreach ($orders as $order) {
//         foreach ($order->getItems() as $order_item) {
//           $variation = $order_item->getPurchasedEntity();

//           if ($variation && $variation instanceof \Drupal\commerce_product\Entity\ProductVariationInterface) {
//             $product = $variation->getProduct();

//             if ($product instanceof ProductInterface) {
//               $linked_formations = $product->get('field_formations_associees')->referencedEntities();

//               // dump($linked_formations);


//               foreach ($linked_formations as $index => $formation_node) {
//                 if ($formation_node->id() == $nid) {
//                   // Formation trouv√©e dans le produit
//                   if ($index === 0) {
//                     // Formation 1 : toujours accessible
//                     return;
//                   } elseif ($index === 1) {

//                     $build['#access'] = FALSE;
//                     unset($build['body']);
//                     // Formation 2 : apr√®s 7 jours
//                     $completed_time = $order->getCompletedTime(); // timestamp
//                     if ($completed_time) {
//                       $now = \Drupal::time()->getCurrentTime();
//                       $days_since_purchase = ($now - $completed_time) / (60 * 60 * 24);

//                       if ($days_since_purchase >= 7) {
//                         return; // acc√®s autoris√©
//                       } else {
//                         $build['#markup'] = '<div class="access-denied">La formation 2 sera disponible 7 jours apr√®s l‚Äôachat.</div>';
//                         $build['#access'] = TRUE;
//                         return;
//                       }
//                     } else {
//                       $build['#markup'] = '<div class="access-denied">Date d‚Äôachat introuvable.</div>';
//                       $build['#access'] = TRUE;
//                       return;
//                     }
//                   }
//                 }
//               }
//             }
//           }
//         }
//       }
//     }






//     //  Formation non li√©e √† un produit achet√©
//     // $build['#markup'] = '<div class="access-denied">Cette formation ne fait pas partie de vos achats.</div>';
//     // $build['#access'] = TRUE;
//   }
// }
